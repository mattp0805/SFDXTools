local obj = {}

--- === SFDXTools ===
---
--- A number of tools for use with the Salesforce CLI

-- Metadata
obj.name = "SFDXTools"
obj.version = "1.1.2"
obj.author = "Matt Port <mattp0@duck.com>"
obj.homepage = "https://github.com/mattp0805/SFDXTools"
obj.license = "MIT - https://opensource.org/licenses/MIT"


--- SFDXTools.SFDXPATH
--- Variable
--- A string to the SFDX CLI binary.
--- Default = "/usr/local/bin/sfdx"

obj.SFDXPATH = "/usr/local/bin/sfdx"

--- SFDXTools.ALERTSTYLE
--- Variable
--- A table defining the default visual style for the alerts generated by the 'hs.alert' module.
--- See https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/alert/alert.lua#L17 for styling

obj.ALERTSTYLE = {
    strokeWidth  = 2,
    strokeColor = { white = 1, alpha = 1 },
    fillColor   = { white = 0, alpha = 0.75 },
    textColor = { white = 1, alpha = 1 },
    textFont  = "PT Mono",
    textSize  = 10,
    radius = 27,
    atScreenEdge = 1,
    fadeInDuration = 0.15,
    fadeOutDuration = 0.15,
    padding = nil, 
}

--- SFDXTools.ORGLISTDURATION
--- Variable
--- An integer defining the duration for which the list shown by startDialog shows on screen, in seconds. 

obj.ORGLISTDURATION = 6

function obj:init()
    w = {}
    self.__index = self
    return setmetatable(w , self )
end

local function writeLine(name, status)
    if name ~= nil or status ~= nil then
        numOfSpaces = 50 - string.len(name)
        spaces = ""
        i = 0
        while  i < numOfSpaces do
            spaces = spaces .. " "
            i = i + 1 
        end
        local newLine = name .. spaces .. status .. "\n"
        return newLine
    else 
        return ""
    end 
end 

local function sfdxList(exitCode, stdOut, stdErr)
        if exitCode == 0 then
            jsonResponse = hs.json.decode(stdOut)
            nonScratchOrgs = {}
            scratchOrgs = {}
            alertString = "Non-Scratch Orgs \n"
            for i, org in ipairs(jsonResponse.result.nonScratchOrgs) do
                if org.alias == nil then
                    alertString = alertString .. writeLine(org.username, org.connectedStatus)
                else 
                    alertString = alertString .. writeLine(org.alias, org.connectedStatus)
                end
            end
           hs.alert.show(alertString, obj.ALERTSTYLE, hs.screen.mainScreen(), obj.ORGLISTDURATION)    
           
        else
            hs.alert.show(stdErr)
        end 
        
end

local function sfdxOpen(exitCode, stdOut, stdErr)
    if exitCode == 0 then
       print('Opened org')
    else
        hs.alert.show(stdErr)
    end 
    
end

local function startDialog()
    hs.focus()
    button, text = hs.dialog.textPrompt("SFDX", "Enter org alias/username to open or 'list' to display all Non-Scratch Orgs", "list", "Open", "Cancel", false)
    if button == 'Open' then
        if text == 'list' then
                t = hs.task.new(obj.SFDXPATH, sfdxList, {'force:org:list', '--json'})
                t:start()     
        else
                t = hs.task.new(obj.SFDXPATH, sfdxOpen, {'force:org:open', '-u', text})
                t:start()
        end
    end
end

--- SFDXTools:bindHotkeys(mapping)
--- Method
--- Binds hotkeys to the startDialog function.
--- Parameters:
---  * mapping - A table containing a table of modifiers and a hotkey for launching the startDialog function.
--- Returns:
--- * A boolean, true if the mapping was successful, otherwise false.

function obj:bindHotKeys(mapping)
    spec = mapping[1]
    key = mapping[2]
    if hs.hotkey.assignable(spec,key) == true then
        hs.hotkey.bind(spec, key, function()
            startDialog()
        end)
        return true
    else 
        print("Could not bind keys, try a different combination")
        return false
    end
end 


return obj
